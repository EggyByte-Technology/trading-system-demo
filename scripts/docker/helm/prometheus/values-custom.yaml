# Custom values for Prometheus when monitoring Trading System
# This configures Prometheus to work with the Trading System HPA

# Allow Prometheus to scrape metrics from other namespaces 
# (especially the trading-system namespace)
server:
  global:
    scrape_interval: 15s
    evaluation_interval: 15s
  
  # Enable compatibility with Kubernetes Metrics Server for HPA
  extraFlags:
    - web.enable-lifecycle
    - web.enable-admin-api
  
  # Configure Prometheus to watch for ServiceMonitor resources
  # in the Trading System namespace
  additionalServiceMonitors:
    - name: trading-system-monitors
      namespaceSelector:
        matchNames:
          - trading-system
      selector:
        matchLabels:
          release: prometheus
      endpoints:
        - port: http
          interval: 15s
          path: /metrics
    
    - name: mongodb-monitor
      namespaceSelector:
        matchNames:
          - trading-system
      selector:
        matchLabels:
          app: mongodb-exporter
      endpoints:
        - port: metrics
          interval: 30s

# Enable alertmanager for Trading System alerts
alertmanager:
  enabled: true
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['alertname', 'job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'null'
      routes:
      - match:
          alertname: Watchdog
        receiver: 'null'
    receivers:
    - name: 'null'

# Enable kube-state-metrics to monitor Kubernetes resources
kube-state-metrics:
  enabled: true

# Enable node-exporter to monitor host metrics
prometheus-node-exporter:
  enabled: true

# Enable Prometheus PushGateway
prometheus-pushgateway:
  enabled: false

# Manage Grafana for visualizing metrics
grafana:
  enabled: true
  adminPassword: admin
  service:
    type: ClusterIP
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-server
          access: proxy
          isDefault: true
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
  dashboards:
    default:
      mongodb-dashboard:
        json: |
          {
            "annotations": {
              "list": [
                {
                  "builtIn": 1,
                  "datasource": "-- Grafana --",
                  "enable": true,
                  "hide": true,
                  "iconColor": "rgba(0, 211, 255, 1)",
                  "name": "Annotations & Alerts",
                  "type": "dashboard"
                }
              ]
            },
            "title": "MongoDB Overview",
            "uid": "mongodb-overview",
            "version": 1,
            "panels": [
              {
                "title": "MongoDB Connections",
                "type": "graph",
                "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0},
                "targets": [{"expr": "mongodb_connections", "legendFormat": "Connections"}]
              },
              {
                "title": "MongoDB Operations",
                "type": "graph",
                "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0},
                "targets": [{"expr": "rate(mongodb_op_counters_total[5m])", "legendFormat": "{{type}}"}]
              }
            ]
          }
      trading-system-dashboard:
        json: |
          {
            "annotations": {
              "list": [
                {
                  "builtIn": 1,
                  "datasource": "-- Grafana --",
                  "enable": true,
                  "hide": true,
                  "iconColor": "rgba(0, 211, 255, 1)",
                  "name": "Annotations & Alerts",
                  "type": "dashboard"
                }
              ]
            },
            "title": "Trading System",
            "uid": "trading-system",
            "version": 1,
            "panels": [
              {
                "title": "API Requests",
                "type": "graph",
                "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0},
                "targets": [{"expr": "sum(rate(http_requests_total[5m])) by (service)", "legendFormat": "{{service}}"}]
              },
              {
                "title": "CPU Usage",
                "type": "graph",
                "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0},
                "targets": [{"expr": "sum(rate(container_cpu_usage_seconds_total{namespace=\"trading-system\"}[5m])) by (pod)", "legendFormat": "{{pod}}"}]
              },
              {
                "title": "Memory Usage",
                "type": "graph",
                "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8},
                "targets": [{"expr": "sum(container_memory_working_set_bytes{namespace=\"trading-system\"}) by (pod)", "legendFormat": "{{pod}}"}]
              },
              {
                "title": "Error Rate",
                "type": "graph",
                "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8},
                "targets": [{"expr": "sum(rate(http_requests_total{namespace=\"trading-system\", status_code=~\"5..\"}[5m])) by (service) / sum(rate(http_requests_total{namespace=\"trading-system\"}[5m])) by (service)", "legendFormat": "{{service}}"}]
              }
            ]
          }

# Configure Prometheus to persist data
server:
  persistentVolume:
    enabled: true
    size: 8Gi

# Resource settings for Prometheus components
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi 